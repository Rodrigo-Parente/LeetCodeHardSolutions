/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int val=0, ListNode next=null) {
 *         this.val = val;
 *         this.next = next;
 *     }
 * }
 */
public class Solution 
{
    public ListNode MergeKLists(ListNode[] lists) 
    {
        if(lists.Length == 0) {return null;}
        if(lists.Length == 1) {return lists[0];}

        while(lists.Length > 1)
        {
            ListNode[] current = new ListNode[(lists.Length + 1) / 2];

            for(int i=0; i < lists.Length; i += 2)
            {
                ListNode list1 = lists[i];
                ListNode list2 = i + 1 < lists.Length ? lists[i+1] : null;
                current[i/2] = MergeLists(list1, list2);
            }
            lists = current;
        }

        return lists[0];
    }

    ListNode MergeLists(ListNode list1, ListNode list2)
    {
        ListNode head = new ListNode(0);
        ListNode current = head;

        while(list1 != null || list2 != null)
        {
            if(list1 == null)
            {
                current.next = list2;
                list2 = null;
            }
            else if(list2 == null)
            {
                current.next = list1;
                list1 = null;
            }
            else if(list1.val < list2.val)
            {
                ListNode min = new ListNode(list1.val);
                list1 = list1.next;
                current.next = min;
                current = current.next;
            }
            else
            {
                ListNode min = new ListNode(list2.val);
                list2 = list2.next;
                current.next = min;
                current = current.next;
            }
        }

        return head.next;
    }
}
